name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install ruff pytest pytest-asyncio
        pip install -e .
        
    - name: Run ruff linting
      run: ruff check .
      
    - name: Run tests
      run: pytest -q

  build:
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        service: [ingestor, trender, rewriter, mediaer, publisher, watchdog]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image for ${{ matrix.service }}
      uses: docker/build-push-action@v5
      with:
        context: ./newsbot/${{ matrix.service }}
        file: ./newsbot/${{ matrix.service }}/Dockerfile
        push: false
        tags: newsbot-${{ matrix.service }}:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install uv
      uses: astral-sh/setup-uv@v2
      with:
        version: "latest"

    - name: Install dependencies
      run: |
        uv sync --all-extras

    - name: Run ruff linting
      run: |
        uv run ruff check newsbot/ tests/ scripts/

    - name: Run ruff formatting check
      run: |
        uv run ruff format --check newsbot/ tests/ scripts/

    - name: Run type checking with mypy
      run: |
        uv run mypy newsbot/

    - name: Run tests with pytest
      env:
        DATABASE_URL: postgresql://test:test@localhost:5432/newsbot_test
        REDIS_URL: redis://localhost:6379/0
        ENVIRONMENT: test
      run: |
        uv run pytest tests/ --cov=newsbot --cov-report=xml --cov-report=term-missing

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # Docker Build and Push
  docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name != 'pull_request'

    strategy:
      matrix:
        service: [ingestor, trender, rewriter, mediaer, publisher, watchdog]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: infra/docker/Dockerfile.service
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          SERVICE_NAME=${{ matrix.service }}
        cache-from: type=gha
        cache-to: type=gha,mode=max